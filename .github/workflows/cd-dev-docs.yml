name: CD for dev docs (fw & web)

on:
  push:
    branches:
    - 'main'
    - 'feature-fw/**'
    - 'feature-web/**'
    - 'doc/**'
    - 'infra/**'

jobs:
  # Prepare index page
  prepare-index:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: assets

    steps:
    - name: Source checkout
      uses: actions/checkout@v4
    - name: Rename file to index.html
      run: mv dev-docs-index.html index.html
    - name: Upload prepared files
      uses: actions/upload-artifact@v4
      with:
        name: prepare-index
        path: assets/index.html
        retention-days: 1


  # Prepare app main UI demo page
  prepare-ui-demo:
    runs-on: ubuntu-latest

    steps:
    - name: Source checkout
      uses: actions/checkout@v4
    - name: Prepare files
      run: |
        mkdir ui-demo-work
        mv assets/ui-demo-index.html ui-demo-work/index.html
        mv assets/head-image.webp    ui-demo-work/
        mv src_web/static/DMXLanes/  ui-demo-work/
        mv src_web/static/index.css  ui-demo-work/
        mv src_web/static/icon.svg   ui-demo-work/
        mv src_web/favicon.ico       ui-demo-work/
    - name: Upload prepared files
      uses: actions/upload-artifact@v4
      with:
        name: prepare-ui-demo
        path: ui-demo-work/
        retention-days: 1


  # Generate Doxygen doc for FW api
  build-fw-api:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src_fw/platform-io

    steps:
    - name: Source checkout
      uses: actions/checkout@v4
    - name: Generate FW api document
      run: docker run --rm -v ./:/github/workspace -w /github/workspace ghcr.io/doxygen/doxygen:Release_1_14_0
    - name: Upload generated docs
      uses: actions/upload-artifact@v4
      with:
        name: build-fw-api
        path: src_fw/platform-io/docs/html/
        retention-days: 1


  # Generate Deno doc for WebApp api
  build-webapp-api:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src_web

    steps:
    - name: Source checkout
      uses: actions/checkout@v4
    - name: Set up Deno
      uses: denoland/setup-deno@v2
      with:
        deno-version: v2.x
    - name: Generate WebApp api document
      run: |
        deno doc --html --name="Web DMX" --private static/*/*.js
        cp -f docs/all_symbols.html docs/index.html
    - name: Upload generated docs
      uses: actions/upload-artifact@v4
      with:
        name: build-webapp-api
        path: src_web/docs/
        retention-days: 1


  # Generate Deno test coverage for WebApp modules
  build-webapp-coverage:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src_web/tests/denotest

    steps:
    - name: Source checkout
      uses: actions/checkout@v4
    - name: Set up Deno
      uses: denoland/setup-deno@v2
      with:
        deno-version: v2.x
    - name: Run all tests
      run: deno test --parallel --coverage
    - name: Export coverage report as HTML
      if: always()
      run: deno coverage --html
    - name: Upload generated report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-webapp-coverage
        path: src_web/tests/denotest/coverage/html/
        retention-days: 1


  # GitHub Pages artifact prepare
  prepare-pages-artifact:
    runs-on: ubuntu-latest
    needs: [prepare-index, prepare-ui-demo, build-fw-api, build-webapp-api, build-webapp-coverage]

    steps:
    - name: Place index
      uses: actions/download-artifact@v4
      with:
        name: prepare-index
        path: .
    - name: Place ui-demo
      uses: actions/download-artifact@v4
      with:
        name: prepare-ui-demo
        path: ui-demo
    - name: Place fw-api
      uses: actions/download-artifact@v4
      with:
        name: build-fw-api
        path: fw-api
    - name: Place webapp-api
      uses: actions/download-artifact@v4
      with:
        name: build-webapp-api
        path: webapp-api
    - name: Place webapp-coverage
      uses: actions/download-artifact@v4
      with:
        name: build-webapp-coverage
        path: webapp-coverage
    - name: Upload artifact for pages deploy
      uses: actions/upload-pages-artifact@v3
      with:
        path: .


  # GitHub Pages deployment
  deploy-pages:
    # Deployment for only main branch, build steps are for all
    if: github.ref == 'refs/heads/main'

    runs-on: ubuntu-latest
    needs: [prepare-pages-artifact]
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deploy-pages.outputs.page_url }}

    steps:
    - name: Deploy pages
      id: deploy-pages
      uses: actions/deploy-pages@v4
